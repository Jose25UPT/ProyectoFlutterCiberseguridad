import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:http/http.dart' as http;
import 'package:tesisjarroultimate/services/virustotal_service.dart';
import 'dart:math';


class MalwareDetectionScreen extends StatefulWidget {
  const MalwareDetectionScreen({super.key});

  @override
  _MalwareDetectionScreenState createState() => _MalwareDetectionScreenState();
}

class _MalwareDetectionScreenState extends State<MalwareDetectionScreen> {
  static const platform = MethodChannel('com.example.security/virustotal');
  final VirusTotalService _virusTotal = VirusTotalService();
  final Random _random = Random();
  List<Map<String, dynamic>> _apps = [];
  bool _isScanning = false;
  String _errorMessage = '';
  int _totalScanned = 0;

  Future<void> _scanApps() async {
    setState(() {
      _isScanning = true;
      _errorMessage = '';
      _apps = [];
      _totalScanned = 0;
    });

    try {
      final hashes = await platform.invokeMethod<List<dynamic>>('scanApps');
      
      if (hashes == null || hashes.isEmpty) {
        setState(() => _errorMessage = 'No se encontraron aplicaciones');
        return;
      }

      // Limitar a 50 apps para pruebas
      final limitedHashes = hashes.take(50).toList();
      
      await Future.forEach(limitedHashes, (dynamic appHash) async {
        try {
          final report = await _virusTotal.getFileReport(appHash['hash']);
          
          setState(() {
            _apps.add({
              'name': appHash['name'],
              'malicious': report['data']['attributes']['last_analysis_stats']['malicious'],
            });
            _totalScanned++;
          });

          // Delay aleatorio entre 100-500ms para evitar bloqueo de API
          if (_totalScanned % 5 == 0) {
            await Future.delayed(Duration(milliseconds: 100 + _random.nextInt(400)));
          }
        } catch (e) {
          setState(() {
            _apps.add({
              'name': appHash['name'],
              'malicious': 'Error: ${e.toString()}',
            });
          });
        }
      });

    } catch (e) {
      setState(() => _errorMessage = 'Error general: ${e.toString()}');
    } finally {
      setState(() => _isScanning = false);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Antivirus'),
        actions: [
          if (_isScanning) 
            Padding(
              padding: const EdgeInsets.all(8.0),
              child: Center(child: Text('Escaneadas: $_totalScanned')),
      )],
      ),
      body: _isScanning
          ? const Center(child: CircularProgressIndicator())
          : _errorMessage.isNotEmpty
              ? Center(child: Text(_errorMessage))
              : _apps.isEmpty
                  ? const Center(child: Text('Presiona el botÃ³n para comenzar el escaneo'))
                  : ListView.builder(
                      itemCount: _apps.length,
                      itemBuilder: (context, index) {
                        final app = _apps[index];
                        return ListTile(
                          title: Text(app['name']),
                          trailing: Chip(
                            label: Text(
                              app['malicious'] is int 
                                ? '${app['malicious']} detecciones'
                                : app['malicious'].toString(),
                              style: TextStyle(
                                color: app['malicious'] is int && app['malicious'] > 0 
                                  ? Colors.red 
                                  : Colors.green,
                              ),
                            ),
                          ),
                        );
                      },
                    ),
      floatingActionButton: FloatingActionButton(
        onPressed: _isScanning ? null : _scanApps,
        child: const Icon(Icons.security),
      ),
    );
  }
}